A graph is a set of vertices (nodes) that are connected to each other via edges in the form of a network.

Types of Graphs
There are two common types of graphs:

Undirected
Directed

Graph Terminologies
1. Degree of Vertex: Total Number of edges connected to a vertex.

There are two types of degrees:

In-Degree of Vertex: Total Number of incoming edges connected to a vertex.

Out-Degree of Vertex: Total Number of outgoing edges connected to a vertex.

2. Parallel Edges: Two or more edges that are incident to the same two vertices

3. Self Loop: Same endpoints of an edge, e.g., pair (x,x).

Ways to Represent a Graph
Here are the two most common ways to represent a graph :

Adjacency Matrix
Adjacency List

Adjacency Matrix
The adjacency matrix is a two-dimensional matrix where each cell can contain a 0 or 1. The row and column headings represent the vertices.

If a cell contains 1, there exists an edge between the corresponding vertices, e.g., 

Matrix[0][1]=1
 shows that an edge exists between vertex 0 and 1.
 
 2. Adjacency List
An array of Linked Lists is used to store edges between two vertices. The size of the array is equal to the number of vertices.
Each index in this array represents a specific vertex in the graph. 
The entry at the index i of the array contains a linked list containing the vertices that are adjacent to vertex i.

Structure of Graph Class
Graph class consists of two data members:
a total number of vertices in the graph, and an array of the linked list to store the adjacency list of vertices. Below is a code snippet of our Graph class:

public class Graph{
    int vertices; //Total number of vertices in graph
    DoublyLinkedList<Integer> adjacencyList[]; //An array of linked lists to store adjacent vertices.
    
    public Graph(int vertices){
    this.vertices = vertices;
    adjacencyList = new DoublyLinkedList[vertices];
    
    for(int i=0;i<vertices; i++){
      adjacencyList[i] = new DoublyLinkedList<>();
      }
      }
      
    
    void printGraph(); //Prints Graph (Adjaceny List)
    void addEdge(int source,int destination){ //Adds an Edge from source vertex to destination vertex
    
    if(source < vertices && destination < vertices){
    this.adjacencyList[source].insertAtEnd(destination);
    }
    }
  }  
    Complexities of Graph Operations
    Note that in this table, V means the total number of vertices, and E means the total number of edges in the Graph.
    
    
Operation     	Adjacency List	Adjacency Matrix
Add Vertex           O(1)	        O(V2)
Remove Vertex     	O(V+E)	        O(V2)
Add Edge	            O(1)	      O(1)
Remove Edge       	O(E)	        O(1)


Adjacency List
The addition of edge in adjacency lists take constant time, as we only need to insert at the tail in the doubly-linked list with a tail pointer of the 
corresponding vertex.

The addition of a vertex is not constant in the worst case. The adjacency list is an array of linked lists.
So, we would need to allocate a bigger array, copy the contents from the previous array, which takes O(n). 
But this operation can be considered O(1) on average because we could do it smartly as follows. We start with a small array initially. 
Then, when there is a need to insert a vertex, instead of allocating one size bigger array, we allocate an array that is twice as big.
That way, in the long run, the cost of re-allocation is averaged out over many other operations. So, O(1) is the average or amortized cost of add vertex
in the adjacency list.

Removing an edge takes 

O(E)
 time because–in the worst case–all the edges could be at a single vertex, and hence, we would have to traverse all E edges to reach the last one.

Removing a vertex takes O(V + E) time because we have to delete all its edges, and then reindex the rest of the list one step back in order to fill the deleted spot.

Adjacency Matrix
Edge operations are performed in constant time, as we only need to manipulate the value in the particular cell.

Vertex operations are performed in O(V2) since we need to add rows and columns. We will also need to fill all the new cells.

Comparison
Both representations are suitable for different situations. If your model frequently manipulates vertices, the adjacency list is a better choice.

If you are dealing primarily with edges, the adjacency matrix is the more efficient approach.

Keep these complexities in mind because they will give you a better idea about the time complexities of the several algorithms we’ll see in this section.
